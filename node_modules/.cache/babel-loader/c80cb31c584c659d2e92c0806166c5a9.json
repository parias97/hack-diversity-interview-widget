{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\peter\\\\OneDrive\\\\Desktop\\\\Drift-Widget\\\\hack-diversity-interview-widget\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport { clone } from 'ramda';\nimport MessageActionTypes from './actionTypes';\nvar defaultState = {\n  /* map of conversationId -> list of messages */\n  byConversationId: {}\n};\n\nvar handleSendMessageSuccess = function handleSendMessageSuccess(state, action) {\n  var message = action.payload.messageFromServer;\n  var conversationMessages = state.byConversationId[message.conversationId]; // check if the list of message for the conversation\n  // exists before trying to append to it\n\n  if (!conversationMessages) {\n    state.byConversationId[message.conversationId] = [message];\n  } else {\n    state.byConversationId[message.conversationId] = [message].concat(_toConsumableArray(conversationMessages));\n  }\n\n  return state;\n};\n\nvar messageReducer = function messageReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var newState = clone(state);\n\n  switch (action.type) {\n    case MessageActionTypes.SendMessageFailed:\n      console.error(\"TODO: message sending errored with this error:\");\n      console.error(action.payload.error);\n      return newState;\n\n    case MessageActionTypes.SendMessageSuccess:\n      return handleSendMessageSuccess(newState, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default messageReducer;","map":{"version":3,"sources":["C:/Users/peter/OneDrive/Desktop/Drift-Widget/hack-diversity-interview-widget/src/modules/message/reducer.js"],"names":["clone","MessageActionTypes","defaultState","byConversationId","handleSendMessageSuccess","state","action","message","payload","messageFromServer","conversationMessages","conversationId","messageReducer","newState","type","SendMessageFailed","console","error","SendMessageSuccess"],"mappings":";AAAA,SAASA,KAAT,QAAsB,OAAtB;AAEA,OAAOC,kBAAP,MAA+B,eAA/B;AAEA,IAAMC,YAAY,GAAG;AACnB;AACAC,EAAAA,gBAAgB,EAAE;AAFC,CAArB;;AAKA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACC,KAAD,EAAQC,MAAR,EAAmB;AAClD,MAAMC,OAAO,GAAGD,MAAM,CAACE,OAAP,CAAeC,iBAA/B;AACA,MAAMC,oBAAoB,GAAGL,KAAK,CAACF,gBAAN,CAAuBI,OAAO,CAACI,cAA/B,CAA7B,CAFkD,CAIlD;AACA;;AACA,MAAI,CAACD,oBAAL,EAA2B;AACzBL,IAAAA,KAAK,CAACF,gBAAN,CAAuBI,OAAO,CAACI,cAA/B,IAAiD,CAACJ,OAAD,CAAjD;AACD,GAFD,MAEO;AACLF,IAAAA,KAAK,CAACF,gBAAN,CAAuBI,OAAO,CAACI,cAA/B,KAAkDJ,OAAlD,4BAA8DG,oBAA9D;AACD;;AACD,SAAOL,KAAP;AACD,CAZD;;AAcA,IAAMO,cAAc,GAAG,SAAjBA,cAAiB,GAAkC;AAAA,MAAjCP,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;AACvD,MAAMO,QAAQ,GAAGb,KAAK,CAACK,KAAD,CAAtB;;AACA,UAAOC,MAAM,CAACQ,IAAd;AACE,SAAKb,kBAAkB,CAACc,iBAAxB;AACEC,MAAAA,OAAO,CAACC,KAAR,CAAc,gDAAd;AACAD,MAAAA,OAAO,CAACC,KAAR,CAAcX,MAAM,CAACE,OAAP,CAAeS,KAA7B;AACA,aAAOJ,QAAP;;AACF,SAAKZ,kBAAkB,CAACiB,kBAAxB;AACE,aAAOd,wBAAwB,CAACS,QAAD,EAAWP,MAAX,CAA/B;;AACF;AACE,aAAOD,KAAP;AARJ;AAUD,CAZD;;AAcA,eAAeO,cAAf","sourcesContent":["import { clone } from 'ramda';\r\n\r\nimport MessageActionTypes from './actionTypes';\r\n\r\nconst defaultState = {\r\n  /* map of conversationId -> list of messages */\r\n  byConversationId: {},\r\n};\r\n\r\nconst handleSendMessageSuccess = (state, action) => {\r\n  const message = action.payload.messageFromServer;\r\n  const conversationMessages = state.byConversationId[message.conversationId];\r\n\r\n  // check if the list of message for the conversation\r\n  // exists before trying to append to it\r\n  if (!conversationMessages) {\r\n    state.byConversationId[message.conversationId] = [message];\r\n  } else {\r\n    state.byConversationId[message.conversationId] = [message, ...conversationMessages];\r\n  }\r\n  return state;\r\n};\r\n\r\nconst messageReducer = (state = defaultState, action) => {\r\n  const newState = clone(state);\r\n  switch(action.type) {\r\n    case MessageActionTypes.SendMessageFailed:\r\n      console.error(\"TODO: message sending errored with this error:\");\r\n      console.error(action.payload.error);\r\n      return newState;\r\n    case MessageActionTypes.SendMessageSuccess:\r\n      return handleSendMessageSuccess(newState, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default messageReducer;\r\n"]},"metadata":{},"sourceType":"module"}