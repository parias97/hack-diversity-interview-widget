{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\peter\\\\OneDrive\\\\Desktop\\\\Drift-Widget\\\\hack-diversity-interview-widget\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\peter\\\\OneDrive\\\\Desktop\\\\Drift-Widget\\\\hack-diversity-interview-widget\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\peter\\\\OneDrive\\\\Desktop\\\\Drift-Widget\\\\hack-diversity-interview-widget\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\peter\\\\OneDrive\\\\Desktop\\\\Drift-Widget\\\\hack-diversity-interview-widget\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\peter\\\\OneDrive\\\\Desktop\\\\Drift-Widget\\\\hack-diversity-interview-widget\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\peter\\\\OneDrive\\\\Desktop\\\\Drift-Widget\\\\hack-diversity-interview-widget\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\peter\\\\OneDrive\\\\Desktop\\\\Drift-Widget\\\\hack-diversity-interview-widget\\\\src\\\\components\\\\SingleConversation\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { sendMessage as _sendMessage } from '../../modules/message/actions';\nimport './style.css';\n\nvar SingleConversation = /*#__PURE__*/function (_PureComponent) {\n  _inherits(SingleConversation, _PureComponent);\n\n  var _super = _createSuper(SingleConversation);\n\n  function SingleConversation(props) {\n    var _this;\n\n    _classCallCheck(this, SingleConversation);\n\n    _this = _super.call(this, props);\n\n    _this.onChangeInput = function (e) {\n      _this.setState({\n        messageInput: e.target.value\n      });\n    };\n\n    _this.maybeSubmit = function (e) {\n      if (e.keyCode === 13) {\n        e.preventDefault();\n\n        _this.props.dispatcher.sendMessage(_this.state.messageInput, _this.props.conversationId);\n\n        _this.setState({\n          messageInput: ''\n        });\n      }\n    };\n\n    _this.state = {\n      messageInput: '',\n      showTimestamp: true,\n      beginningOfFiveMinInterval: 0\n    };\n    return _this;\n  }\n\n  _createClass(SingleConversation, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var FIVE_MINS = 5 * 60 * 1000; // [message timestamp, [array of messages for the interval]]\n\n      var timeStampMap = new Map();\n      var messages = this.props.messages;\n      var messageInput = this.state.messageInput; // calculating 5 min intervals:\n      // 1618754891000(10:09am)-1618754711000(10:05am)= 180000/FIVE_MINS = 0.6 <- round down\n      // map -> {(0, [messages])}\n      // all messages sent within 10:04am to 10:09am will be mapped to array in key 0\n      // 1618755311000 (10:15am)-1618754711000(10:05am)  = 600000/FIVE_MINS =  2\n      // map -> {(0,[messages]), (2, [messages])}\n\n      messages.forEach(function (message) {\n        var currentTime = new Date(Date.now());\n        var messageTime = new Date(message.createdAt);\n        var key = 0;\n        currentTime.setSeconds(0);\n        currentTime.setMilliseconds(0);\n        messageTime.setSeconds(0);\n        messageTime.setMilliseconds(0);\n        console.log(\"current time: \" + currentTime.getTime());\n        console.log(\"message time: \" + messageTime.getTime());\n\n        if ((currentTime.getTime() - messageTime.getTime()) % FIVE_MINS === 0) {\n          key = Math.floor((currentTime.getTime() - messageTime.getTime()) / FIVE_MINS);\n        }\n\n        if (!timeStampMap.has(key)) {\n          timeStampMap.set(key, [message]);\n        } else {\n          timeStampMap.get(key).push(message);\n        }\n      });\n      console.log(timeStampMap);\n\n      var timeStampIntervals = _toConsumableArray(timeStampMap.keys()); //console.log(timeStampIntervals);\n\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"drift-sidebar-single-conversation--container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"drift-sidebar-single-conversation-body\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }\n      }, timeStampIntervals.map(function (intervalKey) {\n        return intervalKey < 1 ? /*#__PURE__*/React.createElement(\"div\", {\n          key: intervalKey,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }\n        }, \"Now\") : /*#__PURE__*/React.createElement(\"div\", {\n          key: intervalKey,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }\n        }, intervalKey * 5, \" mins ago\");\n      }), // Divs are not being appended to the correct tree\n      timeStampIntervals.map(function (intervalKey) {\n        timeStampMap.get(intervalKey).map(function (message) {\n          /*#__PURE__*/\n          React.createElement(\"div\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }\n          }, message.body);\n        });\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"drift-sidebar-single-conversation-input\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        placeholder: \"Type and press enter to send\",\n        value: messageInput,\n        onChange: this.onChangeInput,\n        onKeyDown: this.maybeSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return SingleConversation;\n}(PureComponent);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var conversationId = state.conversation.selectedConversation;\n  return {\n    messages: state.message.byConversationId[conversationId] || [],\n    conversationId: conversationId\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    dispatcher: {\n      sendMessage: function sendMessage(messageBody, conversationId) {\n        return dispatch(_sendMessage({\n          body: messageBody,\n          conversationId: conversationId\n        }));\n      }\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleConversation);","map":{"version":3,"sources":["C:/Users/peter/OneDrive/Desktop/Drift-Widget/hack-diversity-interview-widget/src/components/SingleConversation/index.js"],"names":["React","PureComponent","connect","sendMessage","SingleConversation","props","onChangeInput","e","setState","messageInput","target","value","maybeSubmit","keyCode","preventDefault","dispatcher","state","conversationId","showTimestamp","beginningOfFiveMinInterval","FIVE_MINS","timeStampMap","Map","messages","forEach","message","currentTime","Date","now","messageTime","createdAt","key","setSeconds","setMilliseconds","console","log","getTime","Math","floor","has","set","get","push","timeStampIntervals","keys","map","intervalKey","body","mapStateToProps","conversation","selectedConversation","byConversationId","mapDispatchToProps","dispatch","messageBody"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { sendMessage } from '../../modules/message/actions';\r\nimport './style.css';\r\n\r\n\r\nclass SingleConversation extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      messageInput: '',\r\n      showTimestamp: true,\r\n      beginningOfFiveMinInterval: 0,\r\n    };\r\n  }\r\n\r\n  onChangeInput = (e) => {\r\n    this.setState({\r\n      messageInput: e.target.value,\r\n    });\r\n  }\r\n  \r\n\r\n  maybeSubmit = (e) => {\r\n    if (e.keyCode === 13) {\r\n      e.preventDefault();\r\n      this.props.dispatcher.sendMessage(this.state.messageInput, this.props.conversationId);\r\n      this.setState({\r\n        messageInput: '',\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    \r\n    const FIVE_MINS = 5*60*1000;\r\n    // [message timestamp, [array of messages for the interval]]\r\n    let timeStampMap = new Map();\r\n\r\n    const {\r\n      messages,\r\n    } = this.props;\r\n\r\n    const {\r\n      messageInput,\r\n    } = this.state;\r\n\r\n    // calculating 5 min intervals:\r\n    // 1618754891000(10:09am)-1618754711000(10:05am)= 180000/FIVE_MINS = 0.6 <- round down\r\n    // map -> {(0, [messages])}\r\n    // all messages sent within 10:04am to 10:09am will be mapped to array in key 0\r\n    // 1618755311000 (10:15am)-1618754711000(10:05am)  = 600000/FIVE_MINS =  2\r\n    // map -> {(0,[messages]), (2, [messages])}\r\n    messages.forEach(message => {\r\n      let currentTime = new Date(Date.now());\r\n      let messageTime = new Date(message.createdAt);\r\n      let key = 0;\r\n      currentTime.setSeconds(0);\r\n      currentTime.setMilliseconds(0);\r\n      messageTime.setSeconds(0);\r\n      messageTime.setMilliseconds(0);\r\n      console.log(\"current time: \" + currentTime.getTime());\r\n      console.log(\"message time: \" + messageTime.getTime());\r\n\r\n      if((currentTime.getTime() - messageTime.getTime()) % FIVE_MINS === 0){\r\n        key = Math.floor((currentTime.getTime() - messageTime.getTime()) / FIVE_MINS);\r\n      }\r\n\r\n      if(!timeStampMap.has(key)){\r\n        timeStampMap.set(key, [message]);\r\n      } else {\r\n        timeStampMap.get(key).push(message);\r\n      }\r\n    });\r\n\r\n    console.log(timeStampMap);\r\n\r\n    let timeStampIntervals = [...timeStampMap.keys()];\r\n    //console.log(timeStampIntervals);\r\n\r\n    return (\r\n      <div className=\"drift-sidebar-single-conversation--container\">\r\n        <div className=\"drift-sidebar-single-conversation-body\">\r\n        {}\r\n          {/* {messages.map(message => <div key={message.id}>{message.body}</div>)} */}\r\n          {\r\n            timeStampIntervals.map(intervalKey => (\r\n              intervalKey < 1 ?\r\n              <div key={intervalKey}>Now</div> :\r\n              <div key={intervalKey}>{intervalKey * 5} mins ago</div>\r\n            ))\r\n          }\r\n          {\r\n            // Divs are not being appended to the correct tree\r\n            timeStampIntervals.map(intervalKey => {\r\n              timeStampMap.get(intervalKey).map(message => {\r\n                <div>{message.body}</div> })\r\n              })\r\n          }\r\n        </div>\r\n        <div className=\"drift-sidebar-single-conversation-input\">\r\n          <input placeholder=\"Type and press enter to send\" value={messageInput} onChange={this.onChangeInput} onKeyDown={this.maybeSubmit} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const conversationId = state.conversation.selectedConversation;\r\n  return {\r\n    messages: state.message.byConversationId[conversationId] || [],\r\n    conversationId,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  dispatcher: {\r\n    sendMessage: (messageBody, conversationId) => dispatch(sendMessage({ body: messageBody, conversationId, })),\r\n  }\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleConversation);\r\n"]},"metadata":{},"sourceType":"module"}