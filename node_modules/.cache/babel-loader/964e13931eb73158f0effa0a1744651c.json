{"ast":null,"code":"import { ofType, combineEpics } from 'redux-observable';\nimport { flatMap, pluck } from 'rxjs/operators';\nimport * as MessageActions from '../message/actions';\nimport * as ConversationActions from './actions';\nimport ConversationActionTypes from './actionTypes';\nimport { randomID } from '../../utils';\n/**************************************************\r\n********** YOU DON'T NEED TO EDIT THIS FILE *******\r\n**************************************************/\n\nvar startNewConversation = function startNewConversation(action$, store$) {\n  return action$.pipe(ofType(ConversationActionTypes.StartNewConversation), pluck('payload'), flatMap(function (_ref) {\n    var message = _ref.message;\n    // normally we might get the conversation Id from the server, but for this demo app, we're generating it here\n    var conversationId = randomID();\n    message.conversationId = conversationId;\n    return [MessageActions.sendMessage(message), ConversationActions.goToConversation(conversationId)];\n  }));\n};\n\nexport default combineEpics(startNewConversation);","map":{"version":3,"sources":["C:/Users/peter/OneDrive/Desktop/Drift-Widget/hack-diversity-interview-widget/src/modules/conversation/epic.js"],"names":["ofType","combineEpics","flatMap","pluck","MessageActions","ConversationActions","ConversationActionTypes","randomID","startNewConversation","action$","store$","pipe","StartNewConversation","message","conversationId","sendMessage","goToConversation"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,YAAjB,QAAqC,kBAArC;AACA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,gBAA/B;AAEA,OAAO,KAAKC,cAAZ,MAAgC,oBAAhC;AACA,OAAO,KAAKC,mBAAZ,MAAqC,WAArC;AACA,OAAOC,uBAAP,MAAoC,eAApC;AACA,SAASC,QAAT,QAAyB,aAAzB;AAGA;AACA;AACA;;AAGA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,OAAD,EAAUC,MAAV;AAAA,SAAqBD,OAAO,CAACE,IAAR,CAChDX,MAAM,CAACM,uBAAuB,CAACM,oBAAzB,CAD0C,EAEhDT,KAAK,CAAC,SAAD,CAF2C,EAGhDD,OAAO,CAAC,gBAAiB;AAAA,QAAdW,OAAc,QAAdA,OAAc;AACvB;AACA,QAAMC,cAAc,GAAGP,QAAQ,EAA/B;AACAM,IAAAA,OAAO,CAACC,cAAR,GAAyBA,cAAzB;AACA,WAAO,CACLV,cAAc,CAACW,WAAf,CAA2BF,OAA3B,CADK,EAELR,mBAAmB,CAACW,gBAApB,CAAqCF,cAArC,CAFK,CAAP;AAID,GARM,CAHyC,CAArB;AAAA,CAA7B;;AAcA,eAAeb,YAAY,CACzBO,oBADyB,CAA3B","sourcesContent":["import { ofType, combineEpics } from 'redux-observable';\r\nimport { flatMap, pluck } from 'rxjs/operators';\r\n\r\nimport * as MessageActions from '../message/actions';\r\nimport * as ConversationActions from './actions';\r\nimport ConversationActionTypes from './actionTypes';\r\nimport { randomID } from '../../utils';\r\n\r\n\r\n/**************************************************\r\n********** YOU DON'T NEED TO EDIT THIS FILE *******\r\n**************************************************/\r\n\r\n\r\nconst startNewConversation = (action$, store$) => action$.pipe(\r\n  ofType(ConversationActionTypes.StartNewConversation),\r\n  pluck('payload'),\r\n  flatMap(({ message }) => {\r\n    // normally we might get the conversation Id from the server, but for this demo app, we're generating it here\r\n    const conversationId = randomID();\r\n    message.conversationId = conversationId;\r\n    return [\r\n      MessageActions.sendMessage(message),\r\n      ConversationActions.goToConversation(conversationId)\r\n    ]\r\n  })\r\n)\r\n\r\nexport default combineEpics(\r\n  startNewConversation,\r\n)\r\n"]},"metadata":{},"sourceType":"module"}